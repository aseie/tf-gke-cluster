name: 'gke-infra'

on:
  push:
    branches:
    - main
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:

  GKE-infra:
    name: 'gcp infra'
    runs-on: ubuntu-latest
    environment: lab

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_IDENTITY_PROVIDER_POOL }}/providers/${{ secrets.GCP_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
      
      - name: 'Access secret'
        run: |-
          curl https://secretmanager.googleapis.com/v1/projects/${{secrets.GCP_PROJECT_ID}}/secrets/my-secret/versions/1:access \
            --header "Authorization: Bearer ${{ steps.auth.outputs.access_token }}"

      - name: 'Use gcloud CLI'
        run: |
          gcloud components update
          gcloud alpha storage ls

      - name: check-gcp-creds
        run: |
          ls -la ~/.config
        
      # - id: idtoken
      #   run: |
      #     token=${ACTIONS_ID_TOKEN_REQUEST_TOKEN}
      #     runtimeUrl=${ACTIONS_ID_TOKEN_REQUEST_URL}
      #     runtimeUrl="${runtimeUrl}&audience=google-wlif"
      #     ID_TOKEN=$(curl -H "Authorization: bearer ${token}" ${runtimeUrl} | jq -r ".value")
      #     echo ::set-output name=idtoken::$ID_TOKEN
      #     echo $ID_TOKEN > idtoken.txt
      # - id: sts_token
      #   run: |
      #     STS_TOKEN=$(curl -0 -X POST https://sts.googleapis.com/v1/token \
      #         -H 'Content-Type: text/json; charset=utf-8' \
      #         -d @- <<EOF | jq -r .access_token
      #         {
      #             "audience"           : "//iam.googleapis.com/projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{secrets.GCP_IDENTITY_PROVIDER_POOL}}/providers/${{secrets.GCP_IDENTITY_PROVIDER}}",
      #             "grantType"          : "urn:ietf:params:oauth:grant-type:token-exchange",
      #             "requestedTokenType" : "urn:ietf:params:oauth:token-type:access_token",
      #             "scope"              : "https://www.googleapis.com/auth/cloud-platform",
      #             "subjectTokenType"   : "urn:ietf:params:oauth:token-type:jwt",
      #             "subjectToken"       : "${{steps.idtoken.outputs.idtoken}}"
      #         }
      #     EOF)
      #     echo $STS_TOKEN > sts_token.txt
      #     echo ::set-output name=sts_token::$STS_TOKEN
      # - id: access_token
      #   shell: bash
      #   run: |
      #     ACCESS_TOKEN=$(curl -0 -X POST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${{secrets.GCP_SERVICE_ACCOUNT}}:generateAccessToken \
      #         -H "Content-Type: text/json; charset=utf-8" \
      #         -H "Authorization: Bearer ${{ steps.sts_token.outputs.sts_token }}" \
      #         -d @- <<EOF | jq -r .accessToken
      #         {
      #             "scope": [ "https://www.googleapis.com/auth/cloud-platform" ]
      #         }
      #     EOF)
      #     echo $ACCESS_TOKEN > access_token.txt
      #     echo ::set-output name=access_token::$ACCESS_TOKEN
      # - name: 'Access secret'
      #   run: |-
      #     curl https://secretmanager.googleapis.com/v1/projects/${{ secrets.GCP_PROJECT_ID }}/secrets/my-secret/versions/1:access \
      #       --header "Authorization: Bearer ${{ steps.access_token.outputs.access_token }}"
      #     echo "Done!!!"

    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: init
        run: make init

      # Checks terraform syntax
      - name: validate
        run: make validate

      # Generates an execution plan for Terraform
      # - name: plan
      #   run: make plan -input=false

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      # - name: deploy
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: make deploy
      
      # # Delete all terraform resources
      # - name: destroy
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: make destroy
